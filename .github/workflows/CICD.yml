name: Check

on:
  push:
    branches:
      - main
      - brzoza6538-pipeline-setup
  pull_request:
    branches:
      - main
      - brzoza6538-pipeline-setup

permissions:
  contents: write

env:
  DOCS_REQ: docs/python-docs-requirements.txt
  MKDOCS_CONFIG: docs/mkdocs.yml

jobs:
# 1 ----------------------------------------------------------------------------------------------------
  setup:
    runs-on: ubuntu-latest
    steps:

      - name: Check make version
        run: make --version
        
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: install docker compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
        
# 2 ----------------------------------------------------------------------------------------------------
  check_docker:
   runs-on: ubuntu-latest
   needs: setup 
   steps:
      - uses: actions/checkout@v4

      - name: make  .env.prod file
        run: cp src/deployments/.env.prod.sample src/deployments/.env.prod

      - name: build docker prod image
        run: docker compose -f src/deployments/docker-compose.prod.yml --env-file src/deployments/.env.prod build

      - name: stop prod docker
        run: docker compose -f src/deployments/docker-compose.prod.yml --env-file src/deployments/.env.prod down


      - name: make .env.stage file
        run: cp src/deployments/.env.stage.sample src/deployments/.env.stage
        
      - name: build docker stage image
        run: docker compose -f src/deployments/docker-compose.stage.yml --env-file src/deployments/.env.stage build

      - name: stop stage docker
        run: docker compose -f src/deployments/docker-compose.prod.yml --env-file src/deployments/.env.prod down


      - name: make .env.dev file
        run: cp src/deployments/.env.dev.sample env.dev

      - name: build docker dev image
        run: docker compose -f src/deployments/docker-compose.yml --env-file env.dev build

            
      - name: upload env.dev as artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: env.dev

# 3 ----------------------------------------------------------------------------------------------------
  check_code:
    runs-on: ubuntu-latest
    needs: check_docker
    steps:
      - uses: actions/checkout@v4

      - name: check1
        run: ls -al
      
      - name: get env.dev artifact
        uses: actions/download-artifact@v4
        with:
          name: env-file

      - name: check2
        run: ls -al

        
      - name: start docker
        run: docker compose -f src/deployments/docker-compose.yml --env-file env.dev up -d



      - name: Wait for Database and API to be healthy
        run: |
          until docker compose -f src/deployments/docker-compose.yml --env-file env.dev exec pq-toolkit-db-dev pg_isready -U postgres; do
            echo "Waiting for database..."
            docker compose -f src/deployments/docker-compose.yml --env-file  env.dev logs pq-toolkit-db-dev
            sleep 1
          done
      - name: Wait for Minio to be ready
        run: |
          until docker compose -f src/deployments/docker-compose.yml --env-file  env.dev exec pq-sample-storage-minio-dev curl -s http://localhost:9000 > /dev/null; do
            echo "Waiting for Minio to be ready..."
            docker compose -f src/deployments/docker-compose.yml --env-file  env.dev logs pq-sample-storage-minio-dev
            sleep 1
          done
          echo "Minio is ready."



      - name: check make
        uses: docker compose exec pq-toolkit-api-dev which make


      - name: tests
        run: docker compose -f src/deployments/docker-compose.yml --env-file env.dev exec pq-toolkit-api-dev make test

      - name: linter
        run: docker compose -f src/deployments/docker-compose.yml --env-file env.dev exec pq-toolkit-api-dev make lint

# 4 ----------------------------------------------------------------------------------------------------
  cleanup:
    runs-on: ubuntu-latest
    needs: check_code
    
    steps:
      - uses: actions/checkout@v4

      - name: get env.dev artifact
        uses: actions/download-artifact@v4
        with:
          name: env-file

      - name: get env.dev artifact
        uses: actions/download-artifact@v3
        with:
          name: env-file

      - name: stop dev docker
        run: docker compose -f src/deployments/docker-compose.yml --env-file env.dev down

  # 5 ----------------------------------------------------------------------------------------------------
  notify:
    runs-on: ubuntu-latest
    needs: cleanup
    steps:
      - uses: actions/checkout@v4
      
      
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      - run: |
         pip install -r $DOCS_REQ
         pip install --upgrade pip  
      - name: Build documentation
        run: mkdocs build --config-file $MKDOCS_CONFIG

      - run: mkdocs gh-deploy --config-file $MKDOCS_CONFIG --force
